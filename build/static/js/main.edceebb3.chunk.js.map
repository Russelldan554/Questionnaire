{"version":3,"sources":["Components/Question.js","Components/Answer.js","Components/Form.js","Components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","value","Answer","className","onClick","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answered","count","e","setState","countData","preventDefault","i","slice","_this2","ans","Components_Question","question","onSubmit","handleSubmit","bind","Components_Answer","handleClick","Component","Graph","data","name","Answer1","Answer2","Answer3","Answer4","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","label","angle","position","Legend","Bar","fill","App","showForm","questions","post","$","ajax","url","type","questionID","answer1","answer2","answer3","answer4","dataType","success","console","log","error","xhr","status","err","getQuestion","cache","Components_Form","answers","collectData","formSubmit","Components_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edceebb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Question(props) {\r\n    return (\r\n        <h2>{props.value}</h2>\r\n    );\r\n}\r\n\r\nexport default Question;","import React from \"react\";\r\n\r\n\r\n\r\nfunction Answer(props) {\r\n    return (\r\n        <button className=\"answer\" onClick={props.onClick}>{props.value}</button>\r\n    );\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react';\r\nimport Question from \"./Question\";\r\nimport Answer from \"./Answer\";\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            answered: false,\r\n            count:null\r\n        }\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        this.setState({\r\n            answered: true\r\n        }, function() {\r\n            this.props.countData(this.state.count);\r\n        });\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleClick(i) {\r\n        const count = this.props.count.slice();\r\n        count[i]++;\r\n        this.setState({\r\n            count: count\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        let ans = [0,0,0,0];\r\n        if (this.props.ans) {\r\n            ans = this.props.ans.slice();\r\n        }\r\n\r\n        return (\r\n            <div className=\"Questionnaire\">\r\n                <Question value={this.props.question}></Question>\r\n                <br/>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                <Answer\r\n                    value={ans[0]}\r\n                    onClick={() => this.handleClick(0)}>\r\n                </Answer>\r\n                <br/>\r\n                <br/>\r\n                <Answer\r\n                    value={ans[1]}\r\n                    onClick={() => this.handleClick(1)}>\r\n                </Answer>\r\n                <br/>\r\n                <br/>\r\n                <Answer\r\n                    value={ans[2]}\r\n                    onClick={() => this.handleClick(2)}>\r\n                </Answer>\r\n                <br/>\r\n                <br/>\r\n                <Answer\r\n                    value={ans[3]}\r\n                    onClick={() => this.handleClick(3)}>\r\n                </Answer>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Legend} from 'recharts';\r\n\r\nclass Graph extends Component {\r\n    render() {\r\n        let count;\r\n        if (this.props.data) {\r\n            count = this.props.data.slice();\r\n        }\r\n\r\n        let data = [{\r\n            name: this.props.question,\r\n            Answer1: count[0],\r\n            Answer2: count[1],\r\n            Answer3: count[2],\r\n            Answer4: count[3]\r\n        }]\r\n\r\n        return (\r\n            <div className=\"graph\">\r\n                <BarChart width={600} height={300} data={data}\r\n                          margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                    <XAxis dataKey=\"name\"/>\r\n                    <YAxis label={{ value: 'Times Answered', angle: -90, position: 'insideBottomLeft' }} />\r\n                    <Legend />\r\n                    <Bar name = {this.props.ans[0]} dataKey=\"Answer1\" fill=\"#8884d8\" />\r\n                    <Bar name = {this.props.ans[1]} dataKey=\"Answer2\" fill=\"#82ca9d\" />\r\n                    <Bar name = {this.props.ans[2]} dataKey=\"Answer3\" fill=\"#8884d8\" />\r\n                    <Bar name = {this.props.ans[3]} dataKey=\"Answer4\" fill=\"#82ca9d\" />\r\n                </BarChart>\r\n\r\n                <button className=\"Next\" onClick={this.props.onClick}>Next Question</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Graph;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Components/Form';\nimport Graph from './Components/Graph';\nimport $ from'jquery'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        showForm: true,\n        questions: [],\n        count : [0,0,0,0]\n    }\n  }\n\n  collectData(count) {\n      this.setState({\n          showForm: !this.state.showForm,\n          count: count\n      });\n      this.post(count);\n  }\n\n  post(count) {\n      $.ajax({\n          url: 'http://127.0.0.1:5000/process',\n          type: 'POST',\n          data: {\n              questionID : this.state.questions.questionID,\n              answer1 : count[0],\n              answer2 : count[1],\n              answer3 : count[2],\n              answer4 : count[3]\n          },\n          dataType: \"json\",\n          success: function (data) {\n                console.log(data);\n          },\n          error: function (xhr, status, err) {\n              console.log(err);\n          }\n      });\n  }\n\n  componentWillMount(){\n  }\n\n    componentDidMount(){\n        this.getQuestion();\n    }\n\n  getQuestion() {\n    $.ajax({\n       url: 'http://127.0.0.1:5000/',\n       type : 'GET',\n       dataType:'json',\n       cache: false,\n       success: function(data) {\n           this.setState({\n                questions: data\n            })\n           this.setState({\n               count: this.state.questions.count\n           })\n       }.bind(this),\n        error: function(xhr,status, err){\n           console.log(err);\n        }\n    });\n  }\n\n  formSubmit() {\n      this.setState({showForm: !this.state.showForm});\n      this.getQuestion();\n  }\n\n  render() {\n    const showForm = this.state.showForm;\n    return (\n      <div className=\"Questionnaire\">\n          {showForm ? (\n              <Form\n                  showForm={showForm}\n                  count = {this.state.questions.count}\n                  question = {this.state.questions.question}\n                  ans = {this.state.questions.answers}\n                  countData={this.collectData.bind(this)}\n                  onClick={() => this.formSubmit()}>\n              </Form>\n          ) : (\n             <Graph\n                 showForm={showForm}\n                 data={this.state.count}\n                 question = {this.state.questions.question}\n                 ans = {this.state.questions.answers}\n                 onClick={() => this.formSubmit()}>\n             </Graph>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}